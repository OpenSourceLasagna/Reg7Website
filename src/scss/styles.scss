@use "sass:math";

@import "animations"; //all animations are stored here

/* google fonts */
@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap'); //OPEN SANS REGULAR
//@import url('https://fonts.googleapis.com/css2?family=Rubik&display=swap'); //RUBIK REGULAR
@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@500&display=swap'); //RUBIK MEDIUM 500
/* Importing and overwriting Bootstrap SCSS file. */
@import '../../node_modules/bootstrap/scss/bootstrap';
@import "../../node_modules/bootstrap/scss/functions";
@import "../../node_modules/bootstrap/scss/variables";
@import "../../node_modules/bootstrap-icons/font/bootstrap-icons";

$primary: #032C42;
$secondary: #D1E8E2;
$success: #0C628F;
$info: #279CDB;
$warning: #FFCB9a;

//$primary: #116466;
//$secondary: #D1E8E2;
//$success: #2C3531;
//$info: #FFCB9A;
//$warning: #D9B08C;

$theme-colors: (
        "primary":    $primary,
        "secondary":  $secondary,
        "success":    $success,
        "info":       $info,
        "warning":    $warning,
        "danger":     $danger,
        "light":      $light,
        "dark":       $dark
);

@import "node_modules/bootstrap";

/************************************
------------------------------------
MIXINS
------------------------------------
************************************/

/* all prefixes for all brosers */
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}
$webPrefixes: ["moz", "webkit", "o", "ms"];


/* svg scaling mixin*/
@mixin svgScalingTransform($scalingPoint) {
  @include media-breakpoint-down(sm) {
    @include prefix(transform, scale($scalingPoint * 0.05), $webPrefixes);
  }
  @include media-breakpoint-up(sm) {
    @include prefix(transform, scale($scalingPoint * 0.2), $webPrefixes);
  }
  @include media-breakpoint-up(md) {
    @include prefix(transform, scale($scalingPoint * 0.45), $webPrefixes);
  }
  @include media-breakpoint-up(lg) {
    @include prefix(transform, scale($scalingPoint * 0.5), $webPrefixes);
  }
  @include media-breakpoint-up(xl) {
    @include prefix(transform, scale($scalingPoint * 0.55), $webPrefixes);
  }
  @include media-breakpoint-up(xxl) {
    @include prefix(transform, scale($scalingPoint * 0.6), $webPrefixes);
  }
  @media (min-width: 2000px) {
    @include prefix(transform, scale($scalingPoint * 0.8), $webPrefixes);
  }
}


$svg-container-namespace: '.svg-container';
//Give 'em' 1:1 responsive container by default
#{$svg-container-namespace} {
  display: inline-block;
  position: relative;
  height: 0;
  //Default for 1:1 aspect ratio
  padding: 0 0 100%;
  vertical-align: middle;
  overflow: hidden;
}
//Pass in width / height without any length unit specifier (so we don't have to do sill strip unit wackiness!), and
//this will determine appropraite ratio for padding hack and deliver the conainter code.
//Ex. if you had W100 and H200 you'll get a `padding-bottom:200%`
//Preferably, put something like `viewBox="0 0 N N" preserveAspectRatio="xMinYMin meet"` on your SVG root element
//Dankbar kopiert (und minimal erweitert) von https://unicorn-ui.com/blog/responsive-svg-mixin/ :D
@mixin svg-responsive ($width, $height, $suffix:"", $sizeInPercentage) {
  svg {
    display: inline-block;
    position: absolute;
    top: 0;
    left: 0;
  }
  $padding-bottom: percentage((math.div($height,$width)));
  #{$svg-container-namespace}-#{$suffix} {
    width: $sizeInPercentage;
    padding-bottom: $padding-bottom;
  }
}


@mixin fontScaling($scalingPoint) {
  @include media-breakpoint-down(sm) {
    font-size: $scalingPoint * 1rem !important;
  }
  @include media-breakpoint-up(sm) {
    font-size: $scalingPoint * 1.2rem !important;
  }
  @include media-breakpoint-up(md) {
    font-size: $scalingPoint * 1.35rem !important;
  }
  @include media-breakpoint-up(lg) {
    font-size: $scalingPoint * 1.55rem !important;
  }
  @include media-breakpoint-up(xl) {
    font-size: $scalingPoint * 1.65rem !important;
  }
  @include media-breakpoint-up(xxl) {
    font-size: $scalingPoint * 1.8rem !important;
  }
  @media (min-width: 2000px) {
    font-size: $scalingPoint * 2.1rem !important;
  }
}


body, html {
  max-width: 100%;
  overflow-x: hidden;
  font-size: 16px;
}


/* prevent images from being selected or draggable */
img {
  pointer-events: none;
  -webkit-user-drag: none;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

/*class to fill whole screen*/

.wholeVHW {
  height: calc(100vh - 56px) !important;
  min-height: fit-content + 5rem !important;
  width: 100vw !important;
}

.wholeCol{
  @include make-col-ready(0);
  @include make-col-offset(1);
  @include make-col(10);
}

/*TEXT STYLING*/

.basicText {
  @include fontScaling(1);
  font-family: 'Open Sans', sans-serif;
}

.bigAssHeading{
  @include fontScaling(3.2);
  font-family: 'Rubik', sans-serif;
  line-height: 0.8;
  margin-bottom: 0.1em;
  margin-top: 0.1em;
}

.headingShadow{
  text-shadow: rgba(0, 0, 0, 0.22) 0 3px 8px;
  //white-space: nowrap;
  overflow-wrap: break-word;
}

.pageHeading{
  @include fontScaling(2.5);
  padding-bottom: 1em;
  padding-top: 1em;
  color: $primary;
  font-family: 'Rubik', sans-serif;
  line-height: 0.8;
  margin-bottom: 0.1em;
  margin-top: 0.1em;
}

.pageHeadingMarginTop{
  padding-top: 1.5em;
}

.subHeading{
  @include fontScaling(1.5);
  font-family: 'Open Sans', sans-serif;
}

/** for svg 0 margin **/
.svg-container-icon {
  margin: 0 auto;
  svg {
    margin: 0 auto;
  }
}


///** black and white img to color on hover **/
//.bwToColorOnHover{
//  filter: grayscale(100%);
//  -webkit-filter: grayscale(100%);
//}
//
//.bwToColorOnHover:hover{
//  filter: none;
//  -webkit-filter: grayscale(0);
//}
//img {
//  filter: grayscale(100%);
//  -webkit-filter: grayscale(100%);
//}
//
//img:hover {
//  filter: none;
//  -webkit-filter: grayscale(0);
//}
//
